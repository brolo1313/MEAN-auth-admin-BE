<!DOCTYPE html>
<html lang="en">
  <%- include('./partials/head.ejs') %>
  <style>
    @import url("https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@400;700&display=swap");

    .added-btn {
      position: fixed;
      bottom: 90px;
      right: 45px;
    }

    #addedBtn {
      width: 70px;
      height: 70px;
      border-radius: 50%;
      border: none;
      color: blue;
      cursor: pointer;
    }

    a {
      text-decoration: none;
    }

    img[alt] {
      text-indent: -10000px;
    }

    .container {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      grid-auto-rows: auto;
      grid-gap: 1rem;
    }

    @media screen and (max-width: 600px) {
      .container {
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      }
    }

    @media screen and (min-width: 900px) {
      .container {
        grid-template-columns: repeat(2, 1fr);
      }
    }

    @media screen and (min-width: 1200px) {
      .container {
        grid-template-columns: repeat(3, 1fr);
      }
    }

    .card {
      background-color: #f5f8fc;
      -webkit-box-shadow: 0 0 transparent, 0 0 transparent,
        0 0.375rem 0.375rem -0.125rem rgba(168, 179, 207, 0.4);
      box-shadow: 0 0 transparent, 0 0 transparent,
        0 0.375rem 0.375rem -0.125rem rgba(168, 179, 207, 0.4);
      padding: 0.5rem;
      border-radius: 1rem;
      border: 1px solid rgba(82, 88, 102, 0.2);
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
      -ms-flex-direction: column;
      flex-direction: column;
      -ms-flex-pack: distribute;
      justify-content: space-around;
      width: 330px;
      height: auto;
      -webkit-transition: all 0.2s ease;
      transition: all 0.2s ease;
      margin: 2rem;
    }

    .card__header {
      margin-bottom: 1rem;
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
      -ms-flex-direction: column;
      flex-direction: column;
      margin: 0.5rem 0 0.5rem 0.5rem;
    }

    .card__header .header__img {
      height: 2rem;
      width: 2rem;
      -o-object-fit: cover;
      object-fit: cover;
      border-radius: 50%;
    }

    .card__header .header__title {
      font-size: 1.0625rem;
      line-height: 1.375rem;
      color: #0e1217;
      font-weight: 700;
      margin: 0.5rem;
    }

    .card__body {
      margin: 0 0.5rem;
    }

    .card__body .body__text {
      color: #525866;
      font-size: 0.8125rem;
    }

    .card__body .body__img {
      height: 10rem;
      margin: 0.5rem 0;
    }

    .card__body .body__img img {
      width: 100%;
      height: 100%;
      -o-object-fit: cover;
      object-fit: cover;
      margin: auto;
      border-radius: 0.75rem;
    }

    .card__footer {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -ms-flex-pack: distribute;
      justify-content: space-around;
      -webkit-box-align: center;
      -ms-flex-align: center;
      align-items: center;
      margin: 0.5rem;
    }

    .card:hover {
      border-color: rgba(82, 88, 102, 0.4);
    }

    ion-icon {
      font-size: 1.5rem;
      color: #525866;
      cursor: pointer;
      -webkit-transition: color 0.2s ease;
      transition: color 0.2s ease;
    }

    ion-icon:hover:nth-of-type(1) {
      color: #15ce5c;
    }

    ion-icon:hover:nth-of-type(2) {
      color: #15ce5c;
    }

    ion-icon:hover:nth-of-type(3) {
      color: #fa6620;
    }

    .skeleton {
      -webkit-animation: skeleton-loading 1s linear infinite alternate;
      animation: skeleton-loading 1s linear infinite alternate;
    }

    @-webkit-keyframes skeleton-loading {
      0% {
        background-color: #c2cfd6;
      }
      100% {
        background-color: #f0f3f5;
      }
    }

    @keyframes skeleton-loading {
      0% {
        background-color: #c2cfd6;
      }
      100% {
        background-color: #f0f3f5;
      }
    }

    .skeleton-text {
      width: 100%;
      height: 0.7rem;
      margin-bottom: 0.5rem;
      border-radius: 0.25rem;
    }

    .skeleton-text__body {
      width: 75%;
    }

    .skeleton-footer {
      width: 30%;
    }

    /* MODAL */
    .modal {
      gap: 0.4rem;
      width: 450px;
      padding: 1.3rem;
      position: fixed;
      z-index: 2;
      background-color: white;
      border: 1px solid #ddd;
      border-radius: 15px;

      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%);
    }

    .modal input {
      padding: 0.7rem 0rem;
      border: 1px solid #ddd;
      border-radius: 5px;
      font-size: 0.9em;
      width: 100%;
      margin-bottom: 10px;
      text-indent: 10px;
    }

    .modal input::placeholder {
      color: gainsboro;
      font-size: 1.2em;
      font-style: italic;
    }

    .modal p {
      font-size: 0.9rem;
      color: #777;
      margin: 0.4rem 0 0.2rem;
    }

    #plan-form label {
      color: darkgray;
    }
    button {
      cursor: pointer;
      border: none;
      font-weight: 600;
    }

    .btn-added {
      display: inline-block;
      padding: 0.8rem 2.4rem;
      font-weight: 700;
      background-color: black;
      color: white;
      border-radius: 5px;
      text-align: center;
      font-size: 1em;
      margin-top: 10px;
    }

    .btn-open {
      position: absolute;
      bottom: 150px;
    }

    .btn-close {
      padding: 0.5rem 0.7rem;
      border-radius: 50%;
    }

    .overlay {
      position: fixed;
      top: 0;
      bottom: 0;
      left: 0;
      right: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      backdrop-filter: blur(3px);
      z-index: 1;
    }

    .hidden {
      display: none;
    }
  </style>
  <body>
    <%- include('./partials/header.ejs') %>
    <div class="added-btn">
      <button
        id="addedBtn"
        onclick="openModalForCreate()"
      >
        <ion-icon
          style="font-size: 40px"
          name="add-outline"
        ></ion-icon>
      </button>
    </div>

    <div class="page_container">
      <div class="container">
        <template id="card-template">
          <div
            class="card"
            id="card-link"
          >
            <div class="card__header">
              <div>
                <img
                  class="header__img skeleton"
                  id="logo-img"
                  alt=""
                />
              </div>
              <h3
                class="card__header header__title"
                id="card-title"
              >
                <div class="skeleton skeleton-text"></div>
                <div class="skeleton skeleton-text"></div>
              </h3>
            </div>

            <div class="card__body">
              <div
                class="card__body body__text"
                id="card-details"
              >
                <div class="skeleton skeleton-text skeleton-text__body"></div>
              </div>

              <div class="card__body body__img">
                <img
                  class="skeleton"
                  alt=""
                  id="cover-img"
                />
              </div>
            </div>

            <div
              class="card__footer"
              id="card-footer"
            >
              <div class="skeleton skeleton-text skeleton-footer"></div>
            </div>
          </div>
        </template>
      </div>

      <section class="modal hidden">
        <div
          style="
            display: flex;
            justify-content: space-between;
            align-items: center;
          "
        >
          <h3
            id="modalTitle"
            style="color: black"
          >
            Create Plan
          </h3>
          <div>
            <button class="btn-close">â¨‰</button>
          </div>
        </div>

        <div id="plan-form">
          <label for="title">Title</label>
          <input
            type="text"
            id="title"
            placeholder="new course"
          />
          <label for="details">Description</label>
          <input
            type="text"
            id="details"
            placeholder="with node,js,css"
          />
          <label for="link">Link</label>
          <input
            type="text"
            id="link"
            placeholder="https://www.example.org"
          />
          <label for="coverImage">Cover image</label>
          <input
            type="text"
            id="coverImage"
            placeholder="https://cloudimage/daily-now"
          />
          <label for="logoImage">Logo image</label>
          <input
            type="text"
            id="logoImage"
            placeholder="https://googleusercontent.com/image"
          />
          <div style="text-align: center">
            <button
              id="submitButton"
              onclick="submitForm()"
              class="btn-added"
            >
              Added
            </button>
          </div>
        </div>
      </section>
    </div>

    <div class="overlay hidden"></div>

    <script
      type="module"
      src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.esm.js"
    ></script>
    <script
      nomodule
      src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.js"
    ></script>

    <script>
      const modal = document.querySelector(".modal");
      const overlay = document.querySelector(".overlay");
      const openModalBtn = document.querySelector(".btn-open");
      const closeModalBtn = document.querySelector(".btn-close");

      //Clone the card template
      const container = document.querySelector(".container");
      const cardTemplate = document.getElementById("card-template");
      for (let i = 0; i < 3; i++) {
        container.append(cardTemplate.content.cloneNode(true));
      }

      // close modal function
      const closeModal = function () {
        modal?.classList.add("hidden");
        overlay?.classList.add("hidden");

        document.getElementById("title").value = "";
        document.getElementById("details").value = "";
        document.getElementById("link").value = "";
        document.getElementById("coverImage").value = "";
        document.getElementById("logoImage").value = "";
      };

      // close the modal when the close button and overlay is clicked
      closeModalBtn.addEventListener("click", closeModal);
      overlay.addEventListener("click", closeModal);

      // close modal when the Esc key is pressed
      document.addEventListener("keydown", function (e) {
        if (e.key === "Escape" && !modal.classList.contains("hidden")) {
          closeModal();
        }
      });

      function openModalForCreate() {
        const modalTitle = document.getElementById("modalTitle");
        const modalButton = document.getElementById("submitButton");
        modalTitle.textContent = "Create Plan";
        modalButton.textContent = "Added";

        modal.classList.remove("hidden");
        overlay.classList.remove("hidden");

        modalButton.setAttribute("data-mode", "create");
      }

      function openModalForEdit(dataString) {
        modal.classList.remove("hidden");
        overlay.classList.remove("hidden");

        const modalTitle = document.getElementById("modalTitle");
        const modalButton = document.getElementById("submitButton");

        modalTitle.textContent = "Edit Plan";
        modalButton.textContent = "Update";

        const [title, link, logoImage, details, coverImage, _id] =
          dataString.split("|");

        document.getElementById("title").value = title;
        document.getElementById("details").value = details;
        document.getElementById("link").value = link;
        document.getElementById("coverImage").value = coverImage;
        document.getElementById("logoImage").value = logoImage;

        document
          .getElementById("submitButton")
          .setAttribute("data-mode", "edit");
        document.getElementById("submitButton").setAttribute("data-id", _id);
      }

      function deletePlan(id) {
        console.log("delete by id:", id);
        if (id) {
          fetch(`/plans/${id}`, {
            method: "DELETE",
          }).then(() => {
            // window.location.href = "/";
            fetchData();
          });
        }
      }

      function submitForm() {
        const mode = document
          .getElementById("submitButton")
          .getAttribute("data-mode");
        const planId = document
          .getElementById("submitButton")
          .getAttribute("data-id");
        const title = document.getElementById("title").value;
        const details = document.getElementById("details").value;
        const link = document.getElementById("link").value;
        const coverImage = document.getElementById("coverImage").value;
        const logoImage = document.getElementById("logoImage").value;

        let url = "/add-plan";
        let method = "POST";

        if (mode === "edit") {
          url = `/update-plan/${planId.trim()}`;
          method = "PUT";
        }

        fetch(url, {
          method: method,
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            title: title.trim(),
            details: details.trim(),
            link: link.trim(),
            coverImage: coverImage.trim(),
            logoImage: logoImage.trim(),
          }),
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error("Network response was not ok");
            }
            return response.json();
          })
          .then((data) => {
            console.log("Success:", data);
            closeModal();
            fetchData();
            // Optionally, you can handle success response here
          })
          .catch((error) => {
            console.error("Error:", error);
            // Optionally, you can handle error response here
          });
      }
      function fetchData() {
        fetch("/plans") // Adjust the path as per the location of your data.json file
          .then((response) => response.json())
          .then((posts) => {
            container.innerHTML = "";

            const stringifyData = posts;
            posts.forEach((post) => {
              const div = cardTemplate.content.cloneNode(true);
              div.getElementById("card-link").href = post.link;
              div.getElementById("logo-img").src = post.logoImage
                ? post.logoImage
                : "https://shorturl.at/lCIVZ";
              div.getElementById("card-title").textContent = post.title;
              div.getElementById("card-details").textContent = post.details;
              div.getElementById("cover-img").src = post.coverImage
                ? post.coverImage
                : "https://shorturl.at/kFJM9";

              div.getElementById("card-footer").innerHTML = `
              ${
                post.link
                  ? `<a rel="githubpage" href=${post.link} target="_blank"><ion-icon name="arrow-up"></ion-icon></a>`
                  : `<div style="cursor: not-allowed;"><a rel="githubpage" style="pointer-events: none;" href=${post.link} target="_blank"><ion-icon style="cursor: not-allowed;" name="arrow-up"></ion-icon></a></div>`
              }
                    <ion-icon onclick="openModalForEdit('${post.title} | ${
                post.link
              } | ${post.logoImage} | ${post.details} | ${post.coverImage} | ${
                post._id
              }')" name="create-outline"></ion-icon>
                    <ion-icon onclick="deletePlan('${
                      post._id
                    }')" name="trash-outline"></ion-icon>`;

              container.append(div);
            });
          })
          .catch((error) => {
            console.error("Error fetching data:", error);
            // Handle error, e.g., show error message to the user
          });
      }

      fetchData();
    </script>
  </body>
</html>
